/*!
 * define-property <https://github.com/jonschlinkert/define-property>
 *
<<<<<<< HEAD
 * Copyright (c) 2015-2018, Jon Schlinkert.
=======
 * Copyright (c) 2015, 2017, Jon Schlinkert.
>>>>>>> da58736f2e682a40f89c301964181f1426b3966b
 * Released under the MIT License.
 */

'use strict';

<<<<<<< HEAD
var isobject = require('isobject');
var isDescriptor = require('is-descriptor');
var define = (typeof Reflect !== 'undefined' && Reflect.defineProperty)
  ? Reflect.defineProperty
  : Object.defineProperty;

module.exports = function defineProperty(obj, key, val) {
  if (!isobject(obj) && typeof obj !== 'function' && !Array.isArray(obj)) {
    throw new TypeError('expected an object, function, or array');
  }

  if (typeof key !== 'string') {
    throw new TypeError('expected "key" to be a string');
  }

  if (isDescriptor(val)) {
    define(obj, key, val);
    return obj;
  }

  define(obj, key, {
=======
var isDescriptor = require('is-descriptor');

module.exports = function defineProperty(obj, prop, val) {
  if (typeof obj !== 'object' && typeof obj !== 'function') {
    throw new TypeError('expected an object or function.');
  }

  if (typeof prop !== 'string') {
    throw new TypeError('expected `prop` to be a string.');
  }

  if (isDescriptor(val) && ('set' in val || 'get' in val)) {
    return Object.defineProperty(obj, prop, val);
  }

  return Object.defineProperty(obj, prop, {
>>>>>>> da58736f2e682a40f89c301964181f1426b3966b
    configurable: true,
    enumerable: false,
    writable: true,
    value: val
  });
<<<<<<< HEAD

  return obj;
=======
>>>>>>> da58736f2e682a40f89c301964181f1426b3966b
};
